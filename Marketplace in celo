// SPDX-License-Identifier: MIT  

pragma solidity >=0.7.0 <0.9.0;

contract Marketplace {  

    string public product = "Burger";  
}

contract Marketplace {

    string internal product;

    function writeProduct(string memory _product) public {
        product = _product;
    }
}

contract Marketplace {

    string internal product;

    function writeProduct(string memory _product) public {
        product = _product;
    }

    function readProduct() public view returns (string memory) {
        return product;
    }

}

contract Marketplace {

    mapping (uint => string) internal products;
    
    function writeProduct(uint _index, string memory _product) public {
	products[_index] = _product;
}

function readProduct(uint _index) public view returns (string memory) {
	return products[_index];
}


//spdx-licesne-identifyer: MIT

pragma solidity  >=0.7.0 <0.9.0;

contract marketplace {

uint internal productsLenght = 0;

struct product {
address payable owner;
string name;
string image;
string description;
string location;
uint price;
uint sold;

}

mapping (uint => Product) internal products;

function writeproduct(
string memory _name,
string memory _image,
string memory _description,
string memory _location,
uint _price
) public {
uint _sold: 0;
products[Productslenght] = product(
payable(msg.sender),
_name,
_image,
_description,
_location,
_price,
_sold
);

// SPDX-License-Identifier: MIT

pragma solidity >=0.7.0 <0.9.0;

interface IERC20Token {
  function transfer(address, uint256) external returns (bool);
  function approve(address, uint256) external returns (bool);
  function transferFrom(address, address, uint256) external returns (bool);
  function totalSupply() external view returns (uint256);
  function balanceOf(address) external view returns (uint256);
  function allowance(address, address) external view returns (uint256);

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Marketplace {


function buyProduct(uint _index) public payable  {
		require(
		  IERC20Token(cUsdTokenAddress).transferFrom(
			msg.sender,
			products[_index].owner,
			products[_index].price
		  ),
		  "Transfer failed."
		);
		products[_index].sold++;
	}

	function getProductsLength() public view returns (uint) {
		return (productsLength);
	}
}
